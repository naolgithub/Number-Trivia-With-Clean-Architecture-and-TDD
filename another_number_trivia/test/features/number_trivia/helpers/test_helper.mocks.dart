// Mocks generated by Mockito 5.4.3 from annotations
// in another_number_trivia/test/features/number_trivia/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i11;
import 'dart:convert' as _i19;
import 'dart:typed_data' as _i21;

import 'package:another_number_trivia/core/error/failures.dart' as _i12;
import 'package:another_number_trivia/core/network/network_info.dart' as _i5;
import 'package:another_number_trivia/core/presentation/util/input_converter.dart'
    as _i23;
import 'package:another_number_trivia/core/usecases/usecase.dart' as _i17;
import 'package:another_number_trivia/features/number_trivia/data/datasources/number_trivia_local_data_source.dart'
    as _i4;
import 'package:another_number_trivia/features/number_trivia/data/datasources/number_trivia_remote_data_source.dart'
    as _i3;
import 'package:another_number_trivia/features/number_trivia/data/models/number_trivia_model.dart'
    as _i7;
import 'package:another_number_trivia/features/number_trivia/data/repositories/number_trivia_repository_impl.dart'
    as _i14;
import 'package:another_number_trivia/features/number_trivia/domain/entities/number_trivia.dart'
    as _i13;
import 'package:another_number_trivia/features/number_trivia/domain/repositories/number_trivia_repository.dart'
    as _i6;
import 'package:another_number_trivia/features/number_trivia/domain/usecases/get_concreate_number_trivia.dart'
    as _i15;
import 'package:another_number_trivia/features/number_trivia/domain/usecases/get_random_number_trivia.dart'
    as _i16;
import 'package:dartz/dartz.dart' as _i2;
import 'package:data_connection_checker_nulls/data_connection_checker_nulls.dart'
    as _i8;
import 'package:http/http.dart' as _i10;
import 'package:internet_connection_checker/internet_connection_checker.dart'
    as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i20;
import 'package:shared_preferences/shared_preferences.dart' as _i18;
import 'package:test_api/src/frontend/fake.dart' as _i22;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNumberTriviaRemoteDataSource_1 extends _i1.SmartFake
    implements _i3.NumberTriviaRemoteDataSource {
  _FakeNumberTriviaRemoteDataSource_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNumberTriviaLocalDataSource_2 extends _i1.SmartFake
    implements _i4.NumberTriviaLocalDataSource {
  _FakeNumberTriviaLocalDataSource_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNetworkInfo_3 extends _i1.SmartFake implements _i5.NetworkInfo {
  _FakeNetworkInfo_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNumberTriviaRepository_4 extends _i1.SmartFake
    implements _i6.NumberTriviaRepository {
  _FakeNumberTriviaRepository_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNumberTriviaModel_5 extends _i1.SmartFake
    implements _i7.NumberTriviaModel {
  _FakeNumberTriviaModel_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDuration_6 extends _i1.SmartFake implements Duration {
  _FakeDuration_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAddressCheckResult_7 extends _i1.SmartFake
    implements _i8.AddressCheckResult {
  _FakeAddressCheckResult_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAddressCheckResult_8 extends _i1.SmartFake
    implements _i9.AddressCheckResult {
  _FakeAddressCheckResult_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_9 extends _i1.SmartFake implements _i10.Response {
  _FakeResponse_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_10 extends _i1.SmartFake
    implements _i10.StreamedResponse {
  _FakeStreamedResponse_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUri_11 extends _i1.SmartFake implements Uri {
  _FakeUri_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NumberTriviaRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockNumberTriviaRepository extends _i1.Mock
    implements _i6.NumberTriviaRepository {
  @override
  _i11.Future<_i2.Either<_i12.Failure, _i13.NumberTrivia>>
      getConcreateNumberTrivia(int? number) => (super.noSuchMethod(
            Invocation.method(
              #getConcreateNumberTrivia,
              [number],
            ),
            returnValue:
                _i11.Future<_i2.Either<_i12.Failure, _i13.NumberTrivia>>.value(
                    _FakeEither_0<_i12.Failure, _i13.NumberTrivia>(
              this,
              Invocation.method(
                #getConcreateNumberTrivia,
                [number],
              ),
            )),
            returnValueForMissingStub:
                _i11.Future<_i2.Either<_i12.Failure, _i13.NumberTrivia>>.value(
                    _FakeEither_0<_i12.Failure, _i13.NumberTrivia>(
              this,
              Invocation.method(
                #getConcreateNumberTrivia,
                [number],
              ),
            )),
          ) as _i11.Future<_i2.Either<_i12.Failure, _i13.NumberTrivia>>);

  @override
  _i11.Future<_i2.Either<_i12.Failure, _i13.NumberTrivia>>
      getRandomNumberTrivia() => (super.noSuchMethod(
            Invocation.method(
              #getRandomNumberTrivia,
              [],
            ),
            returnValue:
                _i11.Future<_i2.Either<_i12.Failure, _i13.NumberTrivia>>.value(
                    _FakeEither_0<_i12.Failure, _i13.NumberTrivia>(
              this,
              Invocation.method(
                #getRandomNumberTrivia,
                [],
              ),
            )),
            returnValueForMissingStub:
                _i11.Future<_i2.Either<_i12.Failure, _i13.NumberTrivia>>.value(
                    _FakeEither_0<_i12.Failure, _i13.NumberTrivia>(
              this,
              Invocation.method(
                #getRandomNumberTrivia,
                [],
              ),
            )),
          ) as _i11.Future<_i2.Either<_i12.Failure, _i13.NumberTrivia>>);
}

/// A class which mocks [NumberTriviaRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockNumberTriviaRepositoryImpl extends _i1.Mock
    implements _i14.NumberTriviaRepositoryImpl {
  @override
  _i3.NumberTriviaRemoteDataSource get remoteDataSource => (super.noSuchMethod(
        Invocation.getter(#remoteDataSource),
        returnValue: _FakeNumberTriviaRemoteDataSource_1(
          this,
          Invocation.getter(#remoteDataSource),
        ),
        returnValueForMissingStub: _FakeNumberTriviaRemoteDataSource_1(
          this,
          Invocation.getter(#remoteDataSource),
        ),
      ) as _i3.NumberTriviaRemoteDataSource);

  @override
  _i4.NumberTriviaLocalDataSource get localDataSource => (super.noSuchMethod(
        Invocation.getter(#localDataSource),
        returnValue: _FakeNumberTriviaLocalDataSource_2(
          this,
          Invocation.getter(#localDataSource),
        ),
        returnValueForMissingStub: _FakeNumberTriviaLocalDataSource_2(
          this,
          Invocation.getter(#localDataSource),
        ),
      ) as _i4.NumberTriviaLocalDataSource);

  @override
  _i5.NetworkInfo get networkInfo => (super.noSuchMethod(
        Invocation.getter(#networkInfo),
        returnValue: _FakeNetworkInfo_3(
          this,
          Invocation.getter(#networkInfo),
        ),
        returnValueForMissingStub: _FakeNetworkInfo_3(
          this,
          Invocation.getter(#networkInfo),
        ),
      ) as _i5.NetworkInfo);

  @override
  _i11.Future<_i2.Either<_i12.Failure, _i13.NumberTrivia>>
      getConcreateNumberTrivia(int? number) => (super.noSuchMethod(
            Invocation.method(
              #getConcreateNumberTrivia,
              [number],
            ),
            returnValue:
                _i11.Future<_i2.Either<_i12.Failure, _i13.NumberTrivia>>.value(
                    _FakeEither_0<_i12.Failure, _i13.NumberTrivia>(
              this,
              Invocation.method(
                #getConcreateNumberTrivia,
                [number],
              ),
            )),
            returnValueForMissingStub:
                _i11.Future<_i2.Either<_i12.Failure, _i13.NumberTrivia>>.value(
                    _FakeEither_0<_i12.Failure, _i13.NumberTrivia>(
              this,
              Invocation.method(
                #getConcreateNumberTrivia,
                [number],
              ),
            )),
          ) as _i11.Future<_i2.Either<_i12.Failure, _i13.NumberTrivia>>);

  @override
  _i11.Future<_i2.Either<_i12.Failure, _i13.NumberTrivia>>
      getRandomNumberTrivia() => (super.noSuchMethod(
            Invocation.method(
              #getRandomNumberTrivia,
              [],
            ),
            returnValue:
                _i11.Future<_i2.Either<_i12.Failure, _i13.NumberTrivia>>.value(
                    _FakeEither_0<_i12.Failure, _i13.NumberTrivia>(
              this,
              Invocation.method(
                #getRandomNumberTrivia,
                [],
              ),
            )),
            returnValueForMissingStub:
                _i11.Future<_i2.Either<_i12.Failure, _i13.NumberTrivia>>.value(
                    _FakeEither_0<_i12.Failure, _i13.NumberTrivia>(
              this,
              Invocation.method(
                #getRandomNumberTrivia,
                [],
              ),
            )),
          ) as _i11.Future<_i2.Either<_i12.Failure, _i13.NumberTrivia>>);
}

/// A class which mocks [GetConcreateNumberTrivia].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetConcreateNumberTrivia extends _i1.Mock
    implements _i15.GetConcreateNumberTrivia {
  @override
  _i6.NumberTriviaRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeNumberTriviaRepository_4(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeNumberTriviaRepository_4(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i6.NumberTriviaRepository);

  @override
  _i11.Future<_i2.Either<_i12.Failure, _i13.NumberTrivia>> call(
          _i15.Params? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i11.Future<_i2.Either<_i12.Failure, _i13.NumberTrivia>>.value(
                _FakeEither_0<_i12.Failure, _i13.NumberTrivia>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i11.Future<_i2.Either<_i12.Failure, _i13.NumberTrivia>>.value(
                _FakeEither_0<_i12.Failure, _i13.NumberTrivia>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, _i13.NumberTrivia>>);
}

/// A class which mocks [GetRandomNumberTrivia].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetRandomNumberTrivia extends _i1.Mock
    implements _i16.GetRandomNumberTrivia {
  @override
  _i6.NumberTriviaRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeNumberTriviaRepository_4(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeNumberTriviaRepository_4(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i6.NumberTriviaRepository);

  @override
  _i11.Future<_i2.Either<_i12.Failure, _i13.NumberTrivia>> call(
          _i17.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i11.Future<_i2.Either<_i12.Failure, _i13.NumberTrivia>>.value(
                _FakeEither_0<_i12.Failure, _i13.NumberTrivia>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i11.Future<_i2.Either<_i12.Failure, _i13.NumberTrivia>>.value(
                _FakeEither_0<_i12.Failure, _i13.NumberTrivia>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, _i13.NumberTrivia>>);
}

/// A class which mocks [NumberTriviaRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockNumberTriviaRemoteDataSource extends _i1.Mock
    implements _i3.NumberTriviaRemoteDataSource {
  @override
  _i11.Future<_i7.NumberTriviaModel> getConcreateNumberTrivia(int? number) =>
      (super.noSuchMethod(
        Invocation.method(
          #getConcreateNumberTrivia,
          [number],
        ),
        returnValue:
            _i11.Future<_i7.NumberTriviaModel>.value(_FakeNumberTriviaModel_5(
          this,
          Invocation.method(
            #getConcreateNumberTrivia,
            [number],
          ),
        )),
        returnValueForMissingStub:
            _i11.Future<_i7.NumberTriviaModel>.value(_FakeNumberTriviaModel_5(
          this,
          Invocation.method(
            #getConcreateNumberTrivia,
            [number],
          ),
        )),
      ) as _i11.Future<_i7.NumberTriviaModel>);

  @override
  _i11.Future<_i7.NumberTriviaModel> getRandomNumberTrivia() =>
      (super.noSuchMethod(
        Invocation.method(
          #getRandomNumberTrivia,
          [],
        ),
        returnValue:
            _i11.Future<_i7.NumberTriviaModel>.value(_FakeNumberTriviaModel_5(
          this,
          Invocation.method(
            #getRandomNumberTrivia,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i11.Future<_i7.NumberTriviaModel>.value(_FakeNumberTriviaModel_5(
          this,
          Invocation.method(
            #getRandomNumberTrivia,
            [],
          ),
        )),
      ) as _i11.Future<_i7.NumberTriviaModel>);
}

/// A class which mocks [NumberTriviaLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockNumberTriviaLocalDataSource extends _i1.Mock
    implements _i4.NumberTriviaLocalDataSource {
  @override
  _i11.Future<_i7.NumberTriviaModel> getLastNumberTrivia() =>
      (super.noSuchMethod(
        Invocation.method(
          #getLastNumberTrivia,
          [],
        ),
        returnValue:
            _i11.Future<_i7.NumberTriviaModel>.value(_FakeNumberTriviaModel_5(
          this,
          Invocation.method(
            #getLastNumberTrivia,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i11.Future<_i7.NumberTriviaModel>.value(_FakeNumberTriviaModel_5(
          this,
          Invocation.method(
            #getLastNumberTrivia,
            [],
          ),
        )),
      ) as _i11.Future<_i7.NumberTriviaModel>);

  @override
  _i11.Future<void> cacheNumberTrivia(_i7.NumberTriviaModel? triviaToCache) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheNumberTrivia,
          [triviaToCache],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i5.NetworkInfo {
  @override
  _i11.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i11.Future<bool>.value(false),
        returnValueForMissingStub: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);
}

/// A class which mocks [DataConnectionChecker].
///
/// See the documentation for Mockito's code generation for more information.
class MockDataConnectionChecker extends _i1.Mock
    implements _i8.DataConnectionChecker {
  @override
  List<_i8.AddressCheckOptions> get addresses => (super.noSuchMethod(
        Invocation.getter(#addresses),
        returnValue: <_i8.AddressCheckOptions>[],
        returnValueForMissingStub: <_i8.AddressCheckOptions>[],
      ) as List<_i8.AddressCheckOptions>);

  @override
  set addresses(List<_i8.AddressCheckOptions>? _addresses) =>
      super.noSuchMethod(
        Invocation.setter(
          #addresses,
          _addresses,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Duration get checkInterval => (super.noSuchMethod(
        Invocation.getter(#checkInterval),
        returnValue: _FakeDuration_6(
          this,
          Invocation.getter(#checkInterval),
        ),
        returnValueForMissingStub: _FakeDuration_6(
          this,
          Invocation.getter(#checkInterval),
        ),
      ) as Duration);

  @override
  set checkInterval(Duration? _checkInterval) => super.noSuchMethod(
        Invocation.setter(
          #checkInterval,
          _checkInterval,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i8.AddressCheckResult> get lastTryResults => (super.noSuchMethod(
        Invocation.getter(#lastTryResults),
        returnValue: <_i8.AddressCheckResult>[],
        returnValueForMissingStub: <_i8.AddressCheckResult>[],
      ) as List<_i8.AddressCheckResult>);

  @override
  _i11.Future<bool> get hasConnection => (super.noSuchMethod(
        Invocation.getter(#hasConnection),
        returnValue: _i11.Future<bool>.value(false),
        returnValueForMissingStub: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  _i11.Future<_i8.DataConnectionStatus> get connectionStatus =>
      (super.noSuchMethod(
        Invocation.getter(#connectionStatus),
        returnValue: _i11.Future<_i8.DataConnectionStatus>.value(
            _i8.DataConnectionStatus.disconnected),
        returnValueForMissingStub: _i11.Future<_i8.DataConnectionStatus>.value(
            _i8.DataConnectionStatus.disconnected),
      ) as _i11.Future<_i8.DataConnectionStatus>);

  @override
  _i11.Stream<_i8.DataConnectionStatus> get onStatusChange =>
      (super.noSuchMethod(
        Invocation.getter(#onStatusChange),
        returnValue: _i11.Stream<_i8.DataConnectionStatus>.empty(),
        returnValueForMissingStub:
            _i11.Stream<_i8.DataConnectionStatus>.empty(),
      ) as _i11.Stream<_i8.DataConnectionStatus>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isActivelyChecking => (super.noSuchMethod(
        Invocation.getter(#isActivelyChecking),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i11.Future<_i8.AddressCheckResult> isHostReachable(
          _i8.AddressCheckOptions? options) =>
      (super.noSuchMethod(
        Invocation.method(
          #isHostReachable,
          [options],
        ),
        returnValue:
            _i11.Future<_i8.AddressCheckResult>.value(_FakeAddressCheckResult_7(
          this,
          Invocation.method(
            #isHostReachable,
            [options],
          ),
        )),
        returnValueForMissingStub:
            _i11.Future<_i8.AddressCheckResult>.value(_FakeAddressCheckResult_7(
          this,
          Invocation.method(
            #isHostReachable,
            [options],
          ),
        )),
      ) as _i11.Future<_i8.AddressCheckResult>);
}

/// A class which mocks [InternetConnectionChecker].
///
/// See the documentation for Mockito's code generation for more information.
class MockInternetConnectionChecker extends _i1.Mock
    implements _i9.InternetConnectionChecker {
  @override
  Duration get checkInterval => (super.noSuchMethod(
        Invocation.getter(#checkInterval),
        returnValue: _FakeDuration_6(
          this,
          Invocation.getter(#checkInterval),
        ),
        returnValueForMissingStub: _FakeDuration_6(
          this,
          Invocation.getter(#checkInterval),
        ),
      ) as Duration);

  @override
  Duration get checkTimeout => (super.noSuchMethod(
        Invocation.getter(#checkTimeout),
        returnValue: _FakeDuration_6(
          this,
          Invocation.getter(#checkTimeout),
        ),
        returnValueForMissingStub: _FakeDuration_6(
          this,
          Invocation.getter(#checkTimeout),
        ),
      ) as Duration);

  @override
  List<_i9.AddressCheckOptions> get addresses => (super.noSuchMethod(
        Invocation.getter(#addresses),
        returnValue: <_i9.AddressCheckOptions>[],
        returnValueForMissingStub: <_i9.AddressCheckOptions>[],
      ) as List<_i9.AddressCheckOptions>);

  @override
  set addresses(List<_i9.AddressCheckOptions>? value) => super.noSuchMethod(
        Invocation.setter(
          #addresses,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.Future<bool> get hasConnection => (super.noSuchMethod(
        Invocation.getter(#hasConnection),
        returnValue: _i11.Future<bool>.value(false),
        returnValueForMissingStub: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  _i11.Future<_i9.InternetConnectionStatus> get connectionStatus =>
      (super.noSuchMethod(
        Invocation.getter(#connectionStatus),
        returnValue: _i11.Future<_i9.InternetConnectionStatus>.value(
            _i9.InternetConnectionStatus.connected),
        returnValueForMissingStub:
            _i11.Future<_i9.InternetConnectionStatus>.value(
                _i9.InternetConnectionStatus.connected),
      ) as _i11.Future<_i9.InternetConnectionStatus>);

  @override
  _i11.Stream<_i9.InternetConnectionStatus> get onStatusChange =>
      (super.noSuchMethod(
        Invocation.getter(#onStatusChange),
        returnValue: _i11.Stream<_i9.InternetConnectionStatus>.empty(),
        returnValueForMissingStub:
            _i11.Stream<_i9.InternetConnectionStatus>.empty(),
      ) as _i11.Stream<_i9.InternetConnectionStatus>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isActivelyChecking => (super.noSuchMethod(
        Invocation.getter(#isActivelyChecking),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i11.Future<_i9.AddressCheckResult> isHostReachable(
          _i9.AddressCheckOptions? options) =>
      (super.noSuchMethod(
        Invocation.method(
          #isHostReachable,
          [options],
        ),
        returnValue:
            _i11.Future<_i9.AddressCheckResult>.value(_FakeAddressCheckResult_8(
          this,
          Invocation.method(
            #isHostReachable,
            [options],
          ),
        )),
        returnValueForMissingStub:
            _i11.Future<_i9.AddressCheckResult>.value(_FakeAddressCheckResult_8(
          this,
          Invocation.method(
            #isHostReachable,
            [options],
          ),
        )),
      ) as _i11.Future<_i9.AddressCheckResult>);
}

/// A class which mocks [SharedPreferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferences extends _i1.Mock implements _i18.SharedPreferences {
  @override
  Set<String> getKeys() => (super.noSuchMethod(
        Invocation.method(
          #getKeys,
          [],
        ),
        returnValue: <String>{},
        returnValueForMissingStub: <String>{},
      ) as Set<String>);

  @override
  Object? get(String? key) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [key],
        ),
        returnValueForMissingStub: null,
      ) as Object?);

  @override
  bool? getBool(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getBool,
          [key],
        ),
        returnValueForMissingStub: null,
      ) as bool?);

  @override
  int? getInt(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getInt,
          [key],
        ),
        returnValueForMissingStub: null,
      ) as int?);

  @override
  double? getDouble(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getDouble,
          [key],
        ),
        returnValueForMissingStub: null,
      ) as double?);

  @override
  String? getString(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getString,
          [key],
        ),
        returnValueForMissingStub: null,
      ) as String?);

  @override
  bool containsKey(String? key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  List<String>? getStringList(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getStringList,
          [key],
        ),
        returnValueForMissingStub: null,
      ) as List<String>?);

  @override
  _i11.Future<bool> setBool(
    String? key,
    bool? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setBool,
          [
            key,
            value,
          ],
        ),
        returnValue: _i11.Future<bool>.value(false),
        returnValueForMissingStub: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  _i11.Future<bool> setInt(
    String? key,
    int? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setInt,
          [
            key,
            value,
          ],
        ),
        returnValue: _i11.Future<bool>.value(false),
        returnValueForMissingStub: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  _i11.Future<bool> setDouble(
    String? key,
    double? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDouble,
          [
            key,
            value,
          ],
        ),
        returnValue: _i11.Future<bool>.value(false),
        returnValueForMissingStub: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  _i11.Future<bool> setString(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setString,
          [
            key,
            value,
          ],
        ),
        returnValue: _i11.Future<bool>.value(false),
        returnValueForMissingStub: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  _i11.Future<bool> setStringList(
    String? key,
    List<String>? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setStringList,
          [
            key,
            value,
          ],
        ),
        returnValue: _i11.Future<bool>.value(false),
        returnValueForMissingStub: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  _i11.Future<bool> remove(String? key) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [key],
        ),
        returnValue: _i11.Future<bool>.value(false),
        returnValueForMissingStub: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  _i11.Future<bool> commit() => (super.noSuchMethod(
        Invocation.method(
          #commit,
          [],
        ),
        returnValue: _i11.Future<bool>.value(false),
        returnValueForMissingStub: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  _i11.Future<bool> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i11.Future<bool>.value(false),
        returnValueForMissingStub: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  _i11.Future<void> reload() => (super.noSuchMethod(
        Invocation.method(
          #reload,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i10.Client {
  @override
  _i11.Future<_i10.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i11.Future<_i10.Response>.value(_FakeResponse_9(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
        returnValueForMissingStub:
            _i11.Future<_i10.Response>.value(_FakeResponse_9(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i11.Future<_i10.Response>);

  @override
  _i11.Future<_i10.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i11.Future<_i10.Response>.value(_FakeResponse_9(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
        returnValueForMissingStub:
            _i11.Future<_i10.Response>.value(_FakeResponse_9(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i11.Future<_i10.Response>);

  @override
  _i11.Future<_i10.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i19.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i11.Future<_i10.Response>.value(_FakeResponse_9(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i11.Future<_i10.Response>.value(_FakeResponse_9(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i11.Future<_i10.Response>);

  @override
  _i11.Future<_i10.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i19.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i11.Future<_i10.Response>.value(_FakeResponse_9(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i11.Future<_i10.Response>.value(_FakeResponse_9(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i11.Future<_i10.Response>);

  @override
  _i11.Future<_i10.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i19.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i11.Future<_i10.Response>.value(_FakeResponse_9(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i11.Future<_i10.Response>.value(_FakeResponse_9(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i11.Future<_i10.Response>);

  @override
  _i11.Future<_i10.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i19.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i11.Future<_i10.Response>.value(_FakeResponse_9(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i11.Future<_i10.Response>.value(_FakeResponse_9(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i11.Future<_i10.Response>);

  @override
  _i11.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i11.Future<String>.value(_i20.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
        returnValueForMissingStub:
            _i11.Future<String>.value(_i20.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i11.Future<String>);

  @override
  _i11.Future<_i21.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i11.Future<_i21.Uint8List>.value(_i21.Uint8List(0)),
        returnValueForMissingStub:
            _i11.Future<_i21.Uint8List>.value(_i21.Uint8List(0)),
      ) as _i11.Future<_i21.Uint8List>);

  @override
  _i11.Future<_i10.StreamedResponse> send(_i10.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i11.Future<_i10.StreamedResponse>.value(_FakeStreamedResponse_10(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
        returnValueForMissingStub:
            _i11.Future<_i10.StreamedResponse>.value(_FakeStreamedResponse_10(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i11.Future<_i10.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Fake].
///
/// See the documentation for Mockito's code generation for more information.
class MockFake extends _i1.Mock implements _i22.Fake {}

/// A class which mocks [Uri].
///
/// See the documentation for Mockito's code generation for more information.
class MockUri extends _i1.Mock implements Uri {
  @override
  String get scheme => (super.noSuchMethod(
        Invocation.getter(#scheme),
        returnValue: _i20.dummyValue<String>(
          this,
          Invocation.getter(#scheme),
        ),
        returnValueForMissingStub: _i20.dummyValue<String>(
          this,
          Invocation.getter(#scheme),
        ),
      ) as String);

  @override
  String get authority => (super.noSuchMethod(
        Invocation.getter(#authority),
        returnValue: _i20.dummyValue<String>(
          this,
          Invocation.getter(#authority),
        ),
        returnValueForMissingStub: _i20.dummyValue<String>(
          this,
          Invocation.getter(#authority),
        ),
      ) as String);

  @override
  String get userInfo => (super.noSuchMethod(
        Invocation.getter(#userInfo),
        returnValue: _i20.dummyValue<String>(
          this,
          Invocation.getter(#userInfo),
        ),
        returnValueForMissingStub: _i20.dummyValue<String>(
          this,
          Invocation.getter(#userInfo),
        ),
      ) as String);

  @override
  String get host => (super.noSuchMethod(
        Invocation.getter(#host),
        returnValue: _i20.dummyValue<String>(
          this,
          Invocation.getter(#host),
        ),
        returnValueForMissingStub: _i20.dummyValue<String>(
          this,
          Invocation.getter(#host),
        ),
      ) as String);

  @override
  int get port => (super.noSuchMethod(
        Invocation.getter(#port),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: _i20.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
        returnValueForMissingStub: _i20.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
      ) as String);

  @override
  String get query => (super.noSuchMethod(
        Invocation.getter(#query),
        returnValue: _i20.dummyValue<String>(
          this,
          Invocation.getter(#query),
        ),
        returnValueForMissingStub: _i20.dummyValue<String>(
          this,
          Invocation.getter(#query),
        ),
      ) as String);

  @override
  String get fragment => (super.noSuchMethod(
        Invocation.getter(#fragment),
        returnValue: _i20.dummyValue<String>(
          this,
          Invocation.getter(#fragment),
        ),
        returnValueForMissingStub: _i20.dummyValue<String>(
          this,
          Invocation.getter(#fragment),
        ),
      ) as String);

  @override
  List<String> get pathSegments => (super.noSuchMethod(
        Invocation.getter(#pathSegments),
        returnValue: <String>[],
        returnValueForMissingStub: <String>[],
      ) as List<String>);

  @override
  Map<String, String> get queryParameters => (super.noSuchMethod(
        Invocation.getter(#queryParameters),
        returnValue: <String, String>{},
        returnValueForMissingStub: <String, String>{},
      ) as Map<String, String>);

  @override
  Map<String, List<String>> get queryParametersAll => (super.noSuchMethod(
        Invocation.getter(#queryParametersAll),
        returnValue: <String, List<String>>{},
        returnValueForMissingStub: <String, List<String>>{},
      ) as Map<String, List<String>>);

  @override
  bool get isAbsolute => (super.noSuchMethod(
        Invocation.getter(#isAbsolute),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get hasScheme => (super.noSuchMethod(
        Invocation.getter(#hasScheme),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get hasAuthority => (super.noSuchMethod(
        Invocation.getter(#hasAuthority),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get hasPort => (super.noSuchMethod(
        Invocation.getter(#hasPort),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get hasQuery => (super.noSuchMethod(
        Invocation.getter(#hasQuery),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get hasFragment => (super.noSuchMethod(
        Invocation.getter(#hasFragment),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get hasEmptyPath => (super.noSuchMethod(
        Invocation.getter(#hasEmptyPath),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get hasAbsolutePath => (super.noSuchMethod(
        Invocation.getter(#hasAbsolutePath),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  String get origin => (super.noSuchMethod(
        Invocation.getter(#origin),
        returnValue: _i20.dummyValue<String>(
          this,
          Invocation.getter(#origin),
        ),
        returnValueForMissingStub: _i20.dummyValue<String>(
          this,
          Invocation.getter(#origin),
        ),
      ) as String);

  @override
  bool isScheme(String? scheme) => (super.noSuchMethod(
        Invocation.method(
          #isScheme,
          [scheme],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  String toFilePath({bool? windows}) => (super.noSuchMethod(
        Invocation.method(
          #toFilePath,
          [],
          {#windows: windows},
        ),
        returnValue: _i20.dummyValue<String>(
          this,
          Invocation.method(
            #toFilePath,
            [],
            {#windows: windows},
          ),
        ),
        returnValueForMissingStub: _i20.dummyValue<String>(
          this,
          Invocation.method(
            #toFilePath,
            [],
            {#windows: windows},
          ),
        ),
      ) as String);

  @override
  Uri replace({
    String? scheme,
    String? userInfo,
    String? host,
    int? port,
    String? path,
    Iterable<String>? pathSegments,
    String? query,
    Map<String, dynamic>? queryParameters,
    String? fragment,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #replace,
          [],
          {
            #scheme: scheme,
            #userInfo: userInfo,
            #host: host,
            #port: port,
            #path: path,
            #pathSegments: pathSegments,
            #query: query,
            #queryParameters: queryParameters,
            #fragment: fragment,
          },
        ),
        returnValue: _FakeUri_11(
          this,
          Invocation.method(
            #replace,
            [],
            {
              #scheme: scheme,
              #userInfo: userInfo,
              #host: host,
              #port: port,
              #path: path,
              #pathSegments: pathSegments,
              #query: query,
              #queryParameters: queryParameters,
              #fragment: fragment,
            },
          ),
        ),
        returnValueForMissingStub: _FakeUri_11(
          this,
          Invocation.method(
            #replace,
            [],
            {
              #scheme: scheme,
              #userInfo: userInfo,
              #host: host,
              #port: port,
              #path: path,
              #pathSegments: pathSegments,
              #query: query,
              #queryParameters: queryParameters,
              #fragment: fragment,
            },
          ),
        ),
      ) as Uri);

  @override
  Uri removeFragment() => (super.noSuchMethod(
        Invocation.method(
          #removeFragment,
          [],
        ),
        returnValue: _FakeUri_11(
          this,
          Invocation.method(
            #removeFragment,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeUri_11(
          this,
          Invocation.method(
            #removeFragment,
            [],
          ),
        ),
      ) as Uri);

  @override
  Uri resolve(String? reference) => (super.noSuchMethod(
        Invocation.method(
          #resolve,
          [reference],
        ),
        returnValue: _FakeUri_11(
          this,
          Invocation.method(
            #resolve,
            [reference],
          ),
        ),
        returnValueForMissingStub: _FakeUri_11(
          this,
          Invocation.method(
            #resolve,
            [reference],
          ),
        ),
      ) as Uri);

  @override
  Uri resolveUri(Uri? reference) => (super.noSuchMethod(
        Invocation.method(
          #resolveUri,
          [reference],
        ),
        returnValue: _FakeUri_11(
          this,
          Invocation.method(
            #resolveUri,
            [reference],
          ),
        ),
        returnValueForMissingStub: _FakeUri_11(
          this,
          Invocation.method(
            #resolveUri,
            [reference],
          ),
        ),
      ) as Uri);

  @override
  Uri normalizePath() => (super.noSuchMethod(
        Invocation.method(
          #normalizePath,
          [],
        ),
        returnValue: _FakeUri_11(
          this,
          Invocation.method(
            #normalizePath,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeUri_11(
          this,
          Invocation.method(
            #normalizePath,
            [],
          ),
        ),
      ) as Uri);
}

/// A class which mocks [InputConverter].
///
/// See the documentation for Mockito's code generation for more information.
class MockInputConverter extends _i1.Mock implements _i23.InputConverter {
  @override
  _i2.Either<_i12.Failure, int> stringToUnsignedInteger(String? str) =>
      (super.noSuchMethod(
        Invocation.method(
          #stringToUnsignedInteger,
          [str],
        ),
        returnValue: _FakeEither_0<_i12.Failure, int>(
          this,
          Invocation.method(
            #stringToUnsignedInteger,
            [str],
          ),
        ),
        returnValueForMissingStub: _FakeEither_0<_i12.Failure, int>(
          this,
          Invocation.method(
            #stringToUnsignedInteger,
            [str],
          ),
        ),
      ) as _i2.Either<_i12.Failure, int>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i10.Client {
  @override
  _i11.Future<_i10.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i11.Future<_i10.Response>.value(_FakeResponse_9(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
        returnValueForMissingStub:
            _i11.Future<_i10.Response>.value(_FakeResponse_9(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i11.Future<_i10.Response>);

  @override
  _i11.Future<_i10.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i11.Future<_i10.Response>.value(_FakeResponse_9(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
        returnValueForMissingStub:
            _i11.Future<_i10.Response>.value(_FakeResponse_9(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i11.Future<_i10.Response>);

  @override
  _i11.Future<_i10.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i19.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i11.Future<_i10.Response>.value(_FakeResponse_9(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i11.Future<_i10.Response>.value(_FakeResponse_9(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i11.Future<_i10.Response>);

  @override
  _i11.Future<_i10.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i19.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i11.Future<_i10.Response>.value(_FakeResponse_9(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i11.Future<_i10.Response>.value(_FakeResponse_9(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i11.Future<_i10.Response>);

  @override
  _i11.Future<_i10.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i19.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i11.Future<_i10.Response>.value(_FakeResponse_9(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i11.Future<_i10.Response>.value(_FakeResponse_9(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i11.Future<_i10.Response>);

  @override
  _i11.Future<_i10.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i19.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i11.Future<_i10.Response>.value(_FakeResponse_9(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i11.Future<_i10.Response>.value(_FakeResponse_9(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i11.Future<_i10.Response>);

  @override
  _i11.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i11.Future<String>.value(_i20.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
        returnValueForMissingStub:
            _i11.Future<String>.value(_i20.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i11.Future<String>);

  @override
  _i11.Future<_i21.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i11.Future<_i21.Uint8List>.value(_i21.Uint8List(0)),
        returnValueForMissingStub:
            _i11.Future<_i21.Uint8List>.value(_i21.Uint8List(0)),
      ) as _i11.Future<_i21.Uint8List>);

  @override
  _i11.Future<_i10.StreamedResponse> send(_i10.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i11.Future<_i10.StreamedResponse>.value(_FakeStreamedResponse_10(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
        returnValueForMissingStub:
            _i11.Future<_i10.StreamedResponse>.value(_FakeStreamedResponse_10(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i11.Future<_i10.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
